# -*- coding: utf-8 -*-
"""Cat And Dog image classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EelTkIv1iOSkFJtCK2nlI8nKJy7evA2T
"""

#install the kaggle library
!pip install kaggle

# configuring the path of Kaggle.json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

!ls -l ~/.kaggle/kaggle.json

"""**importing the dog vs cat dataset from kaggle**"""

!kaggle datasets list

#kaggle api
!kaggle competitions download -c dogs-vs-cats

#for see all the files of directory
!ls

#extractiong the zip dataset
from zipfile import ZipFile

dataset = '/content/dogs-vs-cats.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print('The dataset is exxtracted')

#extractiong the zip dataset
from zipfile import ZipFile

dataset = '/content/train.zip'

with ZipFile(dataset, 'r') as zip:
  zip.extractall()
  print('The dataset is exxtracted')

import os

#counting number of files in train folder
path, dirs, files = next(os.walk('/content/train'))
file_count = len(files)
print("Number of images: ", file_count)

"""Printing the number of **images**"""

files_name = os.listdir('/content/train')
print(files_name)

"""**Importing dependencies**"""

import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from google.colab.patches import cv2_imshow
import matplotlib.image as mpimg

"""**Diaplay the images of dog and cat**"""

#display dog image
img = mpimg.imread('/content/train/dog.8114.jpg')
imgmlt = plt.imshow(img)
plt.show()

#display cat image
img = mpimg.imread('/content/train/cat.11924.jpg')
imgmlt = plt.imshow(img)
plt.show()

#get first 3 chrecter of images name

file_names = os.listdir('/content/train/')

#for 1st 5 images
for i in range(5):
  name = file_names[i]
  print(name[0:3])

#count number dog and cat image
file_names = os.listdir ('/content/train/')

dog_count = 0
cat_count = 0

for img_file in file_names:
  name = img_file[0:3]

  if name == 'dog':
    dog_count += 1

  else:
    cat_count += 1

print('Number of dog images: ',dog_count)
print('Number of cat images: ',cat_count)

"""**Resize the images**"""

#create a directory for resized images
os.mkdir('/content/resized images')

#Resized first 2000 images
#resized images will be 240x240
#resized images will be RGB

original_folder = '/content/train/'
resized_folder = '/content/resized images/'

for i in range(2000):

  filename = os.listdir(original_folder)[i]
  img_path = original_folder+filename

  img = Image.open(img_path)
  img = img.resize((224,224))
  img = img.convert('RGB')

  newImagePath = resized_folder+filename
  img.save(newImagePath)

#display dog image
img = mpimg.imread('/content/resized images/dog.10336.jpg')
imgmlt = plt.imshow(img)
plt.show()

#display cat image
img = mpimg.imread('/content/resized images/cat.4388.jpg')
imgmlt = plt.imshow(img)
plt.show()

"""**creating labels for resized images of dogs and cats**

**dog --> 1**

**cat --> 0**
"""

filenames = os.listdir('/content/resized images/')

labels = []

for i in range(2000):
  file_names = filenames[i]
  label = file_names[0:3]

  if label == 'dog':
    labels.append(1)

  else:
    labels.append(0)

print(filenames[0:5])
print(len(filenames))

print(labels[0:5])
print(len(labels))

#counting the images of dogs and cats out of 2000 images

values, counts = np.unique(labels, return_counts=True)
print(values)
print(counts)

"""Converting all the resized images to numpy array"""

import cv2
import glob

image_directory = '/content/resized images/'
image_extension = ['png', 'jpg']

files = []

[files.extend(glob.glob(image_directory + '*.' + e)) for e in image_extension]

dog_cat_images = np.asarray([cv2.imread(file) for file in files])

print(dog_cat_images)

type(dog_cat_images)

print(dog_cat_images.shape)

x = dog_cat_images

#conver labels into numpy array and store in y
y= np.asarray(labels)

"""**Train Test Split**"""

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=5)

print(x.shape, x_train.shape, x_test.shape)

#scaling the data
x_train_scaled = x_train/255
x_test_scaled = x_test/255

print(x_train_scaled)

"""**Building Neural Netword**"""

import tensorflow as tf
import tensorflow_hub as hub

#install tf_keras and import

!pip install tf_keras
import tf_keras

# Define the pretrained model outside the Sequential model
pretrained_model_url = "https://tfhub.dev/google/imagenet/mobilenet_v2_100_224/feature_vector/5"
pretrained_model = hub.KerasLayer(pretrained_model_url, input_shape=(224, 224, 3), trainable=False)



num_of_classes = 2

model = tf_keras.Sequential([

    pretrained_model,
    tf_keras.layers.Dense(num_of_classes)

])

model.summary()

model.compile(
    optimizer = 'adam',
    loss = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics=['acc']
)

model.fit(x_train_scaled, y_train, epochs=5)

"""**Model Evaluation**"""

score, acc = model.evaluate(x_test_scaled, y_test)
print('Test Loss = ', score)
print('Test Accuracy = ', acc)

"""**Prediction System**"""

input_image_path = input('Path of the image to be predicted:')

input_image = cv2.imread(input_image_path)
cv2_imshow(input_image)

input_image_resize = cv2.resize(input_image, (224,224))
input_image_scaled = input_image_resize/255
image_reshaped = np.reshape(input_image_scaled, [1,224,224,3])

input_prediction = model.predict(image_reshaped)
print(input_prediction)

input_pred_label = np.argmax(input_prediction)
print(input_pred_label)

if input_pred_label == 0:
  print('The given image belongs to the class Cat')

else:
  print('The given image belongs to the class dog')

input_image_path = input('Path of the image to be predicted:')

input_image = cv2.imread(input_image_path)
cv2_imshow(input_image)

input_image_resize = cv2.resize(input_image, (224,224))
input_image_scaled = input_image_resize/255
image_reshaped = np.reshape(input_image_scaled, [1,224,224,3])

input_prediction = model.predict(image_reshaped)
print(input_prediction)

input_pred_label = np.argmax(input_prediction)
print(input_pred_label)

if input_pred_label == 0:
  print('The given image belongs to the class Cat')

else:
  print('The given image belongs to the class dog')

"""**Save a train Pickle file**"""

import pickle

# ... (your existing code) ...

# After training the model (after model.fit)
with open('dog_cat_model.pkl', 'wb') as file:
  pickle.dump(model, file)

print("Model saved as dog_cat_model.pkl")